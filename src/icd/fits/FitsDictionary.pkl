module FitsDictionary

import "Subsystem.pkl"
import "Units.pkl"
import "Channel.pkl"

typealias Type = "float" | "string" | "integer"
hidden const FLOAT = "float"
hidden const STRING = "string"
hidden const INTEGER = "integer"

hidden const FITSLENGTH = 8

class Keyword {
  name: String(length <= FITSLENGTH)
  description: String(length <= 120)
  type: Type
  units: Units.Units = Units.NOUNITS

  function withDesc(_description: String): Keyword =
    (this) {
      description = _description
    }

}


function kkey(_key: String): String =
  if (_key.length <= FITSLENGTH)
    _key.toUpperCase()
  else
    throw("Keyword length must be <= \(FITSLENGTH)")

class Source {
  keyword: Keyword
  subsystem: Subsystem.Subsystem = Subsystem.ENC
  channel: Channel.Channel
  fitsComment: String = ""
  componentName: String = ""
  eventName: String = ""
  parameterName: String = ""
}



fitsDictionary = new Mapping<String,Keyword> {
  default { key ->
    name = kkey(key)
    type = STRING
    units = Units.NOUNITS
  }

  ["DATE"] {
    description = "Creation date of HDU: ‘yyyy-mm-dd’ or ‘yyyy-mm-ddTHH:MM:SS[.sss]’"
  }

  ["DATE-OBS"] {
    description = "Creation date of the observation: ‘yyyy-mm-dd’ or ‘yyyy-mm-ddTHH:MM:SS[.sss]’"
  }

  ["OBJECT"] {
    description = "The name or type of the object observed"
  }

  ["CRPIX1"] {
    description = "This is the X coordinate of the reference pixel in the image"
    type = FLOAT
  }

  ["CRPIX2"] {
    description = "This is the Y coordinate of the reference pixel in the image"
    type = FLOAT
  }

  ["RA"] {
    description = "Current right ascension (ICRS, at equinox)"
    type = FLOAT
    units = Units.DEGREES
  }

  ["DEC"] {
    description = "Current declination (ICRS, at equinox)"
    type = FLOAT
    units = Units.DEGREES
  }

  ["FILTER"] {
    description = "Instrumment primary filter name."
  }

  ["COADDS"] {
    description = "Number of co-additions in the exposure"
    type = INTEGER
  }
}


function source(_keyword: Keyword, _subsystem: Subsystem.Subsystem, _channel: Channel.Channel, _fitsComment: String, _componentName: String, _eventName: String, _parameterName: String): Source =
  new {
    keyword = _keyword
    subsystem = _subsystem
    channel = _channel
    fitsComment = _fitsComment
    componentName = _componentName
    eventName = _eventName
    parameterName = _parameterName
  }

sources = new Listing<Source> {
  new {
    keyword = fitsDictionary["FILTER"]
    subsystem = Subsystem.WFOS
    channel = Channel.WFOS_BLUE
    fitsComment = "Main BLUE filer"
    componentName = "detector"
    eventName = "current"
    parameterName = "name"
  }


  // TCS
  source(fitsDictionary["CRPIX1"], Subsystem.TCS, Channel.TCS, "CRPIX1 for WCS", "PointingKernelAssembly", "WCSFITSHeader", "CRPIX1")
  source(fitsDictionary["CRPIX2"], Subsystem.TCS, Channel.TCS, "CRPIX2 for WCS", "PointingKernelAssembly", "WCSFITSHeader", "CRPIX2")
  source(fitsDictionary["RA"], Subsystem.TCS, Channel.TCS, "RA of tracking position", "pk", "currentPosition", "ra")
  source(fitsDictionary["DEC"], Subsystem.TCS, Channel.TCS, "Declination of tracking position", "pk", "currentPosition", "dec")

  // IRIS Imager
  source(fitsDictionary["FILTER"], Subsystem.IRIS, Channel.IRIS_IMAGER, "IRIS imager filter", "imager.filter", "current", "name")
  source(fitsDictionary["COADDS"], Subsystem.IRIS, Channel.IRIS_IMAGER, "IRIS imager coadds", "is", "imagerObserveSettings", "numRamps")

  // IRIS IFS
  source(fitsDictionary["COADDS"], Subsystem.IRIS, Channel.IRIS_IFS, "IRIS IFS coadds", "is", "ifsObserveSettings", "numRamps")

  // WFOS Blue
  source(fitsDictionary["FILTER"], Subsystem.WFOS, Channel.WFOS_BLUE, "WFOS Blue imager filter", "blue.filter", "current", "name")
  source(fitsDictionary["FILTER"], Subsystem.WFOS, Channel.WFOS_RED, "WFOS Red imager filter", "red.filter", "current", "name")


}


key = "RAA"
x:Boolean = fitsDictionary.toMap().containsKey(key)


output {
  renderer = new JsonRenderer {}
}
